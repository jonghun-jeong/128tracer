/* * 128tracer.c * * Created: 2017-08-14 오후 4:38:46 * Author : HP */ 
#include <avr/io.h>#include <avr/interrupt.h>#include "timer.h"#include "ADC.h"#include "USART.h"#include "IO.h"
volatile int L_motor[4]={0xc0,0x60,0x30,0x90};volatile int L_t=0;volatile char calib_flg=0;volatile int R_motor[4]={0x09,0x03,0x06,0x0c};volatile int R_t=0;volatile int led_value[8];volatile int j=0;volatile unsigned char led_average[8];volatile unsigned char led_max[8]={0,0,0,0,0,0,0,0};volatile int led_val[8];volatile int all_sum=0;volatile float position_temp;volatile int position=400;volatile int Former_position=400;volatile unsigned int led_low[8]={255,255,255,255,255,255,255,255};const unsigned int Motor_TimeTable[800]= {    9224,   3820,   2931,   2471,   2177,   1968,   1810,   1685,   1582,   1496,    1423,   1360,   1304,   1255,   1211,   1171,   1135,   1102,   1072,   1044,    1018,    994,    972,    951,    931,    913,    895,    879,    863,    849,    835,    821,    809,    796,    785,    774,    763,    753,    743,    733,    724,    715,    707,    699,    691,    683,    676,    669,    662,    655,    649,    642,    636,    630,    624,    619,    613,    608,    603,    597,    592,    588,    583,    578,    574,    569,    565,    561,    557,    553,    549,    545,    541,    537,    534,    530,    527,    523,    520,    517,    514,    510,    507,    504,    501,    498,    495,    493,    490,    487,    484,    482,    479,    476,    474,    471,    469,    467,    464,    462,    460,    457,    455,    453,    451,    449,    446,    444,    442,    440,    438,    436,    434,    432,    431,    429,    427,    425,    423,    421,    420,    418,    416,    415,    413,    411,    410,    408,    406,    405,    403,    402,    400,    399,    397,    396,    394,    393,    391,    390,    389,    387,    386,    385,    383,    382,    381,    379,    378,    377,    375,    374,    373,    372,    371,    369,    368,    367,    366,    365,    364,    362,    361,    360,    359,    358,    357,    356,    355,    354,    353,    352,    351,    350,    349,    348,    347,    346,    345,    344,    343,    342,    341,    340,    339,    338,    337,    336,    335,    335,    334,    333,    332,    331,    330,    329,    329,    328,    327,    326,    325,    324,    324,    323,    322,    321,    320,    320,    319,    318,    317,    317,    316,    315,    314,    314,    313,    312,    312,    311,    310,    309,    309,    308,    307,    307,    306,    305,    305,    304,    303,    303,    302,    301,    301,    300,    299,    299,    298,    298,    297,    296,    296,    295,    294,    294,    293,    293,    292,    291,    291,    290,    290,    289,    289,    288,    287,    287,    286,    286,    285,    285,    284,    284,    283,    283,    282,    281,    281,    280,    280,    279,    279,    278,    278,    277,    277,    276,    276,    275,    275,    274,    274,    273,    273,    272,    272,    272,    271,    271,    270,    270,    269,    269,    268,    268,    267,    267,    266,    266,    266,    265,    265,    264,    264,    263,    263,    263,    262,    262,    261,    261,    260,    260,    260,    259,    259,    258,    258,    258,    257,    257,    256,    256,    256,    255,    255,    254,    254,    254,    253,    253,    252,    252,    252,    251,    251,    251,    250,    250,    249,    249,    249,    248,    248,    248,    247,    247,    247,    246,    246,    245,    245,    245,    244,    244,    244,    243,    243,    243,    242,    242,    242,    241,    241,    241,    240,    240,    240,    239,    239,    239,    238,    238,    238,    238,    237,    237,    237,    236,    236,    236,    235,    235,    235,    234,    234,    234,    233,    233,    233,    233,    232,    232,    232,    231,    231,    231,    231,    230,    230,    230,    229,    229,    229,    229,    228,    228,    228,    227,    227,    227,    227,    226,    226,    226,    225,    225,    225,    225,    224,    224,    224,    224,    223,    223,    223,    223,    222,    222,    222,    222,    221,    221,    221,    221,    220,    220,    220,    219,    219,    219,    219,    219,    218,    218,    218,    218,    217,    217,    217,    217,    216,    216,    216,    216,    215,    215,    215,    215,    214,    214,    214,    214,    213,    213,    213,    213,    213,    212,    212,    212,    212,    211,    211,    211,    211,    211,    210,    210,    210,    210,    209,    209,    209,    209,    209,    208,    208,    208,    208,    208,    207,    207,    207,    207,    206,    206,    206,    206,    206,    205,    205,    205,    205,    205,    204,    204,    204,    204,    204,    203,    203,    203,    203,    203,    202,    202,    202,    202,    202,    201,    201,    201,    201,    201,    201,    200,    200,    200,    200,    200,    199,    199,    199,    199,    199,    198,    198,    198,    198,    198,    198,    197,    197,    197,    197,    197,    196,    196,    196,    196,    196,    196,    195,    195,    195,    195,    195,    194,    194,    194,    194,    194,    194,    193,    193,    193,    193,    193,    193,    192,    192,    192,    192,    192,    192,    191,    191,    191,    191,    191,    191,    190,    190,    190,    190,    190,    190,    189,    189,    189,    189,    189,    189,    188,    188,    188,    188,    188,    188,    188,    187,    187,    187,    187,    187,    187,    186,    186,    186,    186,    186,    186,    186,    185,    185,    185,    185,    185,    185,    185,    184,    184,    184,    184,    184,    184,    183,    183,    183,    183,    183,    183,    183,    182,    182,    182,    182,    182,    182,    182,    181,    181,    181,    181,    181,    181,    181,    180,    180,    180,    180,    180,    180,    180,    180,    179,    179,    179,    179,    179,    179,    179,    178,    178,    178,    178,    178,    178,    178,    177,    177,    177,    177,    177,    177,    177,    177,    176,    176,    176,    176,    176,    176,    176,    176,    175,    175,    175,    175,    175,    175,    175,    175,    174,    174,    174,    174,    174,    174,    174,    174,    173,    173,    173,    173,    173,    173,    173,    173,    172,    172,    172,    172,    172,    172,    172,    172,    171,    171,    171,    171,    171,    171,    171,    171,    170,    170,    170,    170,    170,    170,    170,    170,    170,    169,    169,    169,    169,    169,    169,    169,    169,    169,    168,    168,    168,    168,    168,    168,    168,    168,    168,    167,    167,    167,    167,    167,    167,    167,    167,    167,    166,    166,    166,    166,    166,    166,    166,    166,    166,    165,    165,    165,    165,    165,    165,    165,    165,    165,    164,    164,    164,    164,    164,    164,    164,    164,    164,    164,    163,    163,    163,    163,    163,    163,    163,    163,    163,



};const unsigned int Slow_TimeTable[800]= {  11297,   4679,   3590,   3027,   2666,   2411,   2217,   2063,   1938,   1833,  1743,   1666,   1597,   1537,   1483,   1434,   1390,   1350,   1313,   1279,  1247,   1218,   1190,   1165,   1141,   1118,   1097,   1077,   1058,   1040,  1022,   1006,    990,    975,    961,    948,    934,    922,    910,    898,  887,    876,    866,    856,    846,    837,    828,    819,    811,    802,  794,    787,    779,    772,    765,    758,    751,    744,    738,    732,  726,    720,    714,    708,    703,    697,    692,    687,    682,    677,  672,    668,    663,    658,    654,    650,    645,    641,    637,    633,  629,    625,    621,    618,    614,    610,    607,    603,    600,    597,  593,    590,    587,    584,    581,    578,    575,    572,    569,    566,  563,    560,    557,    555,    552,    549,    547,    544,    542,    539,  537,    534,    532,    530,    527,    525,    523,    521,    518,    516,  514,    512,    510,    508,    506,    504,    502,    500,    498,    496,  494,    492,    490,    488,    487,    485,    483,    481,    479,    478,  476,    474,    473,    471,    469,    468,    466,    465,    463,    461,  460,    458,    457,    455,    454,    452,    451,    450,    448,    447,  445,    444,    443,    441,    440,    439,    437,    436,    435,    433,  432,    431,    430,    428,    427,    426,    425,    423,    422,    421,  420,    419,    418,    416,    415,    414,    413,    412,    411,    410,  409,    408,    407,    406,    405,    403,    402,    401,    400,    399,  398,    397,    396,    395,    394,    394,    393,    392,    391,    390,  389,    388,    387,    386,    385,    384,    383,    383,    382,    381,  380,    379,    378,    377,    376,    376,    375,    374,    373,    372,  372,    371,    370,    369,    368,    368,    367,    366,    365,    364,  364,    363,    362,    361,    361,    360,    359,    359,    358,    357,  356,    356,    355,    354,    354,    353,    352,    352,    351,    350,  349,    349,    348,    347,    347,    346,    346,    345,    344,    344,  343,    342,    342,    341,    340,    340,    339,    339,    338,    337,  337,    336,    336,    335,    334,    334,    333,    333,    332,    331,  331,    330,    330,    329,    329,    328,    328,    327,    326,    326,  325,    325,    324,    324,    323,    323,    322,    322,    321,    321,  320,    320,    319,    319,    318,    318,    317,    317,    316,    316,  315,    315,    314,    314,    313,    313,    312,    312,    311,    311,  310,    310,    309,    309,    308,    308,    307,    307,    307,    306,  306,    305,    305,    304,    304,    303,    303,    303,    302,    302,  301,    301,    300,    300,    300,    299,    299,    298,    298,    297,  297,    297,    296,    296,    295,    295,    295,    294,    294,    293,  293,    293,    292,    292,    291,    291,    291,    290,    290,    289,  289,    289,    288,    288,    288,    287,    287,    286,    286,    286,  285,    285,    285,    284,    284,    284,    283,    283,    282,    282,  282,    281,    281,    281,    280,    280,    280,    279,    279,    279,  278,    278,    278,    277,    277,    277,    276,    276,    276,    275,  275,    275,    274,    274,    274,    273,    273,    273,    272,    272,  272,    271,    271,    271,    270,    270,    270,    270,    269,    269,  269,    268,    268,    268,    267,    267,    267,    267,    266,    266,  266,    265,    265,    265,    264,    264,    264,    264,    263,    263,  263,    262,    262,    262,    262,    261,    261,    261,    260,    260,  260,    260,    259,    259,    259,    259,    258,    258,    258,    257,  257,    257,    257,    256,    256,    256,    256,    255,    255,    255,  255,    254,    254,    254,    254,    253,    253,    253,    252,    252,  252,    252,    251,    251,    251,    251,    250,    250,    250,    250,  250,    249,    249,    249,    249,    248,    248,    248,    248,    247,  247,    247,    247,    246,    246,    246,    246,    245,    245,    245,  245,    245,    244,    244,    244,    244,    243,    243,    243,    243,  242,    242,    242,    242,    242,    241,    241,    241,    241,    240,  240,    240,    240,    240,    239,    239,    239,    239,    239,    238,  238,    238,    238,    237,    237,    237,    237,    237,    236,    236,  236,    236,    236,    235,    235,    235,    235,    235,    234,    234,  234,    234,    234,    233,    233,    233,    233,    233,    232,    232,  232,    232,    232,    231,    231,    231,    231,    231,    230,    230,  230,    230,    230,    229,    229,    229,    229,    229,    228,    228,  228,    228,    228,    228,    227,    227,    227,    227,    227,    226,  226,    226,    226,    226,    226,    225,    225,    225,    225,    225,  224,    224,    224,    224,    224,    224,    223,    223,    223,    223,  223,    223,    222,    222,    222,    222,    222,    221,    221,    221,  221,    221,    221,    220,    220,    220,    220,    220,    220,    219,  219,    219,    219,    219,    219,    218,    218,    218,    218,    218,  218,    217,    217,    217,    217,    217,    217,    217,    216,    216,  216,    216,    216,    216,    215,    215,    215,    215,    215,    215,  214,    214,    214,    214,    214,    214,    214,    213,    213,    213,  213,    213,    213,    212,    212,    212,    212,    212,    212,    212,  211,    211,    211,    211,    211,    211,    211,    210,    210,    210,  210,    210,    210,    210,    209,    209,    209,    209,    209,    209,  208,    208,    208,    208,    208,    208,    208,    207,    207,    207,  207,    207,    207,    207,    207,    206,    206,    206,    206,    206,  206,    206,    205,    205,    205,    205,    205,    205,    205,    204,  204,    204,    204,    204,    204,    204,    204,    203,    203,    203,  203,    203,    203,    203,    202,    202,    202,    202,    202,    202,  202,    202,    201,    201,    201,    201,    201,    201,    201,    201,  200,    200,    200,    200,    200,    200,    200,    200,    199,    199,
 };volatile unsigned char calib_start=1;volatile int position_gap;volatile unsigned char direction=0;volatile unsigned int L_Motor_speed=0;volatile unsigned int R_Motor_speed=0;volatile unsigned int L_turn_mark;volatile unsigned int R_turn_mark;volatile unsigned int L_Motor_Control=400;volatile unsigned int R_Motor_Control=400;volatile unsigned int start=0;void calibration (void){           int i;     for(i=0;i<8;i++)     {       if(led_value[i]>led_max[i])       {         led_max[i]=led_value[i];       }         else if(led_value[i]<led_low[i])       {         led_low[i]=led_value[i];          }       led_average[i]=led_max[i]-led_low[i];     }   }
void sensing() {   int i;   all_sum = 0;  L_turn_mark=0;  R_turn_mark=0;   for(i=0;i<8;i++)   {     if(led_value[i]>led_max[i])     {       led_max[i]=led_value[i];     }       if(led_value[i]<led_low[i])     {       led_low[i]=led_value[i];        }     led_average[i]=led_max[i]-led_low[i];     led_val[i] = (unsigned char)(((led_value[i]-led_low[i])*100)/led_average[i]);     if(led_val[i]>100)led_val[i] = 100;     all_sum += led_val[i];    if(i<4)     L_turn_mark+=led_val[i];    else if(i>=4)     R_turn_mark+=led_val[i];
   }}void Catch_position(void){   char i;   position_temp = 0;  Former_position=position;     for(i=0; i<8;i++)    {       position_temp += (i+1)*led_val[i];      }    position_temp = position_temp/all_sum;     position = position_temp*100;    
   

}void Control_Motor(){/* if(position>=700&&position<800) {  R_Motor_Control=0;  L_Motor_Control=750; } else if(position>=650&&position<700) {  R_Motor_Control=5;  L_Motor_Control=700; } else if(position>=600) {  R_Motor_Control=10;  L_Motor_Control=750;   } if(position>=550) {  R_Motor_Control=50;  L_Motor_Control=700; }*/ if(position>=500) {  R_Motor_Control=120;  L_Motor_Control=650;  } else if(position>=460&&position<500) {  L_Motor_Control=position+60;  R_Motor_Control=710-position; } else if(position>=450&&position<460) {  L_Motor_Control=position+140;  R_Motor_Control=850-position; } else if(position>=440&&position<450) {  L_Motor_Control=position+110;  R_Motor_Control=900-position; } else if(position>=400&&position<440) {  L_Motor_Control=position-40;  R_Motor_Control=830-position; }  else if(position<400) {  L_Motor_Control=150;  R_Motor_Control=650; }/*  else if(position<350) {  L_Motor_Control=80;  R_Motor_Control=580; }  else if(position<300) {  L_Motor_Control=10;  R_Motor_Control=600; }   else if(position>=200&&position<250) {  L_Motor_Control=5;  R_Motor_Control=700; } else if(position>=100&&position<200) {  L_Motor_Control=0;  R_Motor_Control=750;   } */     }
void Set_MotorSpeed(){  if(L_Motor_speed>L_Motor_Control) {    while(L_Motor_speed>L_Motor_Control)  {   L_Motor_speed-=8;  } } else if(L_Motor_speed<L_Motor_Control) {    while(L_Motor_speed<L_Motor_Control)  {   L_Motor_speed+=8;  } } else if(R_Motor_speed>R_Motor_Control) {  while(R_Motor_speed>R_Motor_Control)  {   R_Motor_speed-=8;  } } else if(R_Motor_speed<R_Motor_Control) {  while(R_Motor_speed<R_Motor_Control)  {   R_Motor_speed+=8;  } }
}
void ADC_view(void){ /* int i;   for(i=0;i<8;i++)  {   while((UCSR0A&0x20)!=0x20);   UDR0=(((int)(led_val[i]/1000))+'0');      while((UCSR0A&0x20)!=0x20);   UDR0=((int)((led_val[i]/100)%10)+'0');      while((UCSR0A&0x20)!=0x20);   UDR0=(((int)((led_val[i]/10)%10))+'0');   while((UCSR0A&0x20)!=0x20);   UDR0=((led_val[i]%10)+'0');   while((UCSR0A&0x20)!=0x20);   UDR0=' ';  }while((UCSR0A&0x20)!=0x20);UDR0=0x0a;while((UCSR0A&0x20)!=0x20);UDR0=0x0b;*/
while((UCSR0A&0x20)!=0x20);UDR0=(((int)(position/1000))+'0');
while((UCSR0A&0x20)!=0x20);UDR0=((int)((position/100)%10)+'0');
while((UCSR0A&0x20)!=0x20);UDR0=(((int)((position/10)%10))+'0');while((UCSR0A&0x20)!=0x20);UDR0=((position%10)+'0');while((UCSR0A&0x20)!=0x20);UDR0=' ';}
void End_Mark(){  if((led_val[0]>60)&&(led_val[7]>60)&&(led_val[5]<40))  {   PORTB=0x01;   for(int i=0;i<10000;i++)   {    DDRA=0xff;    if((i%25)==0)    {     L_Motor_speed--;     R_Motor_speed--;    }       }   DDRA=0x00;  }}
ISR(TIMER1_COMPA_vect){ if(calib_flg) {  PORTA=(L_motor[L_t]+(PORTA&0x0f));  L_t++;  if(L_t==4)  {   L_t=0;  }  }    if(calib_flg)  {   if(start<5000)   {    start++;   }  }  if(start<1500)  {   OCR1A=Slow_TimeTable[L_Motor_speed];  }  else if(start>1500)  {   OCR1A=Motor_TimeTable[L_Motor_speed];  }  }
ISR(TIMER3_COMPA_vect){ if(calib_flg) {  PORTA=(R_motor[R_t]+(PORTA&0xf0));  R_t++;  if(R_t==4)  {   R_t=0;  }  }  if(start<1500)  {   OCR3A=Slow_TimeTable[R_Motor_speed];  }  else if(start>1500)  {   OCR3A=Motor_TimeTable[R_Motor_speed];  }}
SIGNAL(ADC_vect){  led_value[j++]=ADCH;   if(j==8)    j=0;   ADMUX=0x60+j;  ADCSRA=0xcf; }

int main(){ INIT_ADC(); INIT_IO(); INIT_TIMER(); INIT_USART(); sei();    while(calib_flg==0) {    while(calib_start)  {   if((PIND&0x03)==0x02)   {    calib_start=0;    PORTB=0x0c;   }  }    calibration();  
  if((PIND&0x03)==0x01)  {   calib_flg=1;   PORTB=0x00;  }   } while(1) {   if(start>19)  {   for(int i=0;i<10000;i++)   {    DDRA=0xff;    if((i%25)==0)    {     L_Motor_speed++;     R_Motor_speed++;    }      }   break;  } }    PORTB=0xff;  while(1) {   sensing();  Catch_position();  Control_Motor();  Set_MotorSpeed();  if(start>4900)  {   End_Mark();  } }  }
